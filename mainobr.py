import asyncio
import logging
import sqlite3

from aiogram import Bot, types, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from datetime import date
from asyncio import sleep

from config import tokenobr
from filters import IsTeacher, IsNotTeacher, IsStudent, IsParent
from obrsystem.keyboards import main_btns, kb_choice, cl_buttons, high_choice, inline_kb1, inf, links_kb

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=tokenobr, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)


class Decide(StatesGroup):
    Me = State()
    class Teacher(StatesGroup):
        Name = State()
        Form = State()
    class Student(StatesGroup):
        Name = State()
        Form = State()
        Code = State()
    class Parent(StatesGroup):
        Name = State()
        Form = State()
        Child = State()
        Code = State()

class Assign(StatesGroup):
    Form = State()
    Todo = State()
    Deadline = State()

class Event(StatesGroup):
    Name = State()
    Form = State()
    Date = State()

class Send(StatesGroup):
    Text = State()

class NewList(StatesGroup):
    ListName = State()

class NewGoal(StatesGroup):
    GoalName = State()

@dp.message_handler(commands='start', state=None)
async def start(message:types.Message):
    id1 = str(message.from_user.id)
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS teachers(id, name, form, code_stud, code_par)")
    cursor.execute("CREATE TABLE IF NOT EXISTS students(id, name, form, code)")
    cursor.execute("CREATE TABLE IF NOT EXISTS parents(id, name, form, child, code)")
    conn1.commit()
    teacher = cursor.execute(f"SELECT name FROM teachers WHERE id = '{id1}'").fetchall()
    student = cursor.execute(f"SELECT name FROM students WHERE id = '{id1}'").fetchall()
    parent = cursor.execute(f"SELECT name FROM parents WHERE id = '{id1}'").fetchall()
    if teacher:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {str(teacher[0][0])[str(teacher[0][0]).find(' '):]}", reply_markup=main_btns)
    if student:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {str(student[0][0])[str(student[0][0]).find(' '):]}", reply_markup=main_btns)
    if parent:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {str(parent[0][0])[str(parent[0][0]).find(' '):]}", reply_markup=main_btns)
    elif not parent and not student and not teacher:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ", reply_markup=kb_choice)
        await Decide.Me.set()

@dp.message_handler(text='–Ø —É—á–∏—Ç–µ–ª—å', state=Decide.Me)
async def teach(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û", reply_markup=ReplyKeyboardRemove())
    await Decide.Teacher.Name.set()

@dp.message_handler(lambda message: message.text, state=Decide.Teacher.Name)
async def tname(message:types.Message):
    data = [str(message.from_user.id), message.text, 0, 0, 0]
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute("INSERT OR IGNORE INTO teachers VALUES(?, ?, ?, ?, ?)", data)
    conn1.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å")
    await Decide.Teacher.Form.set()

@dp.message_handler(lambda message: message.text, state=Decide.Teacher.Form)
async def tform(message:types.Message, state=Decide.Teacher.Form):
    id1 = str(message.from_user.id)
    form1 = message.text.upper()
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute(f"UPDATE teachers SET form = REPLACE(form, 0, '{form1}')")
    name = str(cursor.execute(f"SELECT name FROM teachers WHERE id = '{id1}'").fetchone()[0]).split()
    code_s = name[0][0] + name[1][0] + name[2][0] + form1 + '–£'
    code_p = name[0][0] + name[1][0] + name[2][0] + form1 + '–†'
    cursor.execute(f"UPDATE teachers SET code_stud = REPLACE(code_stud, 0, '{code_s}')")
    cursor.execute(f"UPDATE teachers SET code_par = REPLACE(code_par, 0, '{code_p}')")
    conn1.commit()
    await message.answer(f"<b>–ö–æ–¥ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤:</b> {code_s}\n\n<b>–ö–æ–¥ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:</b> {code_p}", reply_markup=main_btns)
    await FSMContext.finish(state)


@dp.message_handler(text='–Ø —É—á–µ–Ω–∏–∫', state=Decide.Me)
async def stud(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û", reply_markup=ReplyKeyboardRemove())
    await Decide.Student.Name.set()


@dp.message_handler(lambda message: message.text, state=Decide.Student.Name)
async def tform(message:types.Message):
    data = [message.from_user.id, message.text, 0, 0]
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute("INSERT OR IGNORE INTO students VALUES(?, ?, ?, ?)", data)
    conn1.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å")
    await Decide.Student.Form.set()

@dp.message_handler(lambda message: message.text, state=Decide.Student.Form)
async def sform(message:types.Message):
    id1 = message.from_user.id
    form1 = message.text.upper()
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute(f"UPDATE students SET form = REPLACE(form, 0, '{form1}') WHERE id = '{id1}'")
    conn1.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–µ–Ω–∏–∫–∞, –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –≤–∞—à–µ–≥–æ —É—á–∏—Ç–µ–ª—è")
    await Decide.Student.Code.set()

@dp.message_handler(lambda message: message.text, state=Decide.Student.Code)
async def scode(message:types.Message, state=Decide.Student.Code):
    code_to_check = message.text.upper()
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    form1 = str(cursor.execute(f"SELECT form FROM students WHERE id = {id1}").fetchone()[0])
    code_check = str(cursor.execute(f"SELECT code_stud FROM teachers WHERE form = '{form1}'").fetchone()[0])
    if code_to_check == code_check:
        cursor.execute(f"UPDATE students SET code = REPLACE(code, 0, '{code_to_check}') WHERE id = '{id1}'")
        conn1.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞—Å—Å", reply_markup=main_btns)
        await FSMContext.finish(state)
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await Decide.Student.Code.set()


@dp.message_handler(text='–Ø —Ä–æ–¥–∏—Ç–µ–ª—å', state=Decide.Me)
async def stud(message:types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û", reply_markup=ReplyKeyboardRemove())
    await Decide.Parent.Name.set()

@dp.message_handler(lambda message: message.text, state=Decide.Parent.Name)
async def tform(message:types.Message):
    data = [message.from_user.id, message.text, 0, 0, 0]
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute("INSERT OR IGNORE INTO parents VALUES(?, ?, ?, ?, ?)", data)
    conn1.commit()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞")
    await Decide.Parent.Form.set()

@dp.message_handler(lambda message: message.text, state=Decide.Parent.Form)
async def sform(message:types.Message):
    id1 = message.from_user.id
    form1 = message.text.upper()
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute(f"UPDATE parents SET form = REPLACE(form, 0, '{form1}') WHERE id = '{id1}'")
    conn1.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –§–ò–û –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞")
    await Decide.Parent.Child.set()


@dp.message_handler(lambda message: message.text, state=Decide.Parent.Child)
async def sform(message: types.Message):
    id1 = message.from_user.id
    child1 = message.text.title()
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    cursor.execute(f"UPDATE parents SET child = REPLACE(child, 0, '{child1}') WHERE id = '{id1}'")
    conn1.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—á–µ–Ω–∏–∫–∞, –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É —É—á–∏—Ç–µ–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞")
    await Decide.Parent.Code.set()


@dp.message_handler(lambda message: message.text, state=Decide.Parent.Code)
async def scode(message:types.Message, state=Decide.Student.Code):
    code_to_check = message.text.upper()
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor = conn1.cursor()
    child1 = str(cursor.execute(f"SELECT child FROM parents WHERE id = '{id1}'").fetchone()[0])
    form1 = str(cursor.execute(f"SELECT form FROM parents WHERE id = '{id1}'").fetchone()[0])
    code_check = str(cursor.execute(f"SELECT code_par FROM teachers WHERE form = '{form1}'").fetchone()[0])
    if code_to_check == code_check:
        cursor.execute(f"UPDATE parents SET code = REPLACE(code, 0, '{code_to_check}') WHERE id = '{id1}'")
        conn1.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è", reply_markup=main_btns)
        await FSMContext.finish(state)
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await Decide.Parent.Code.set()

@dp.message_handler(text=['/timetable', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóìÔ∏è'])
async def schedulle(message:types.Message):
    conn2 = sqlite3.connect('timetable.db')
    cursor = conn2.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS monday(class, lessons)")
    cursor.execute("CREATE TABLE IF NOT EXISTS tuesday(class, lessons)")
    cursor.execute("CREATE TABLE IF NOT EXISTS wednesday(class, lessons)")
    cursor.execute("CREATE TABLE IF NOT EXISTS thursday(class, lessons)")
    cursor.execute("CREATE TABLE IF NOT EXISTS friday(class, lessons)")
    cursor.execute("CREATE TABLE IF NOT EXISTS saturday(class, lessons)")
    conn2.commit()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=cl_buttons)

@dp.message_handler(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
async def monday(message:types.Message):
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    form = str(cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()[0])
    conn2 = sqlite3.connect('timetable.db')
    cursor2 = conn2.cursor()
    to_print = str(cursor2.execute(f"SELECT lessons FROM monday WHERE class = '{form}'").fetchall()[0][0]).split(', ')
    ans = f'<b>{form} - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b>\n\n'
    for i in range(len(to_print)):
        ans += f"{i+1}. {to_print[i]}\n"
    await message.answer(ans)

@dp.message_handler(text='–í—Ç–æ—Ä–Ω–∏–∫')
async def monday(message:types.Message):
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    form = str(cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()[0])
    conn2 = sqlite3.connect('timetable.db')
    cursor2 = conn2.cursor()
    to_print = str(cursor2.execute(f"SELECT lessons FROM tuesday WHERE class = '{form}'").fetchall()[0][0]).split(', ')
    ans = f'<b>{form} - –í—Ç–æ—Ä–Ω–∏–∫</b>\n\n'
    for i in range(len(to_print)):
        ans += f"{i+1}. {to_print[i]}\n"
    await message.answer(ans)

@dp.message_handler(text='–°—Ä–µ–¥–∞')
async def monday(message:types.Message):
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    form = str(cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()[0])
    conn2 = sqlite3.connect('timetable.db')
    cursor2 = conn2.cursor()
    to_print = str(cursor2.execute(f"SELECT lessons FROM wednesday WHERE class = '{form}'").fetchall()[0][0]).split(', ')
    ans = f'<b>{form} - –°—Ä–µ–¥–∞</b>\n\n'
    for i in range(len(to_print)):
        ans += f"{i+1}. {to_print[i]}\n"
    await message.answer(ans)

@dp.message_handler(text='–ß–µ—Ç–≤–µ—Ä–≥')
async def monday(message:types.Message):
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    form = str(cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()[0])
    conn2 = sqlite3.connect('timetable.db')
    cursor2 = conn2.cursor()
    to_print = str(cursor2.execute(f"SELECT lessons FROM thursday WHERE class = '{form}'").fetchall()[0][0]).split(', ')
    ans = f'<b>{form} - –ß–µ—Ç–≤–µ—Ä–≥</b>\n\n'
    for i in range(len(to_print)):
        ans += f"{i+1}. {to_print[i]}\n"
    await message.answer(ans)

@dp.message_handler(text='–ü—è—Ç–Ω–∏—Ü–∞')
async def monday(message:types.Message):
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    form = str(cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()[0])
    conn2 = sqlite3.connect('timetable.db')
    cursor2 = conn2.cursor()
    to_print = str(cursor2.execute(f"SELECT lessons FROM friday WHERE class = '{form}'").fetchall()[0][0]).split(', ')
    ans = f'<b>{form} - –ü—è—Ç–Ω–∏—Ü–∞</b>\n\n'
    for i in range(len(to_print)):
        ans += f"{i+1}. {to_print[i]}\n"
    await message.answer(ans)

@dp.message_handler(text='–°—É–±–±–æ—Ç–∞')
async def monday(message:types.Message):
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    form = str(cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()[0])
    conn2 = sqlite3.connect('timetable.db')
    cursor2 = conn2.cursor()
    to_print = str(cursor2.execute(f"SELECT lessons FROM saturday WHERE class = '{form}'").fetchall()[0][0]).split(', ')
    ans = f'<b>{form} - –°—É–±–±–æ—Ç–∞</b>\n\n'
    for i in range(len(to_print)):
        ans += f"{i+1}. {to_print[i]}\n"
    await message.answer(ans)

@dp.message_handler(IsTeacher(), text=['/assignment', '–ó–∞–¥–∞–Ω–∏—è üìö'])
async def assign(message:types.Message):
    conn = sqlite3.connect('assign.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS homework(id, teacher, form, todo, deadline)")
    conn.commit()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    await Assign.Form.set()

@dp.message_handler(IsTeacher(), lambda message:message.text, state=Assign.Form)
async def asf(message:types.Message):
    id1 = message.from_user.id
    form = message.text.upper()
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    name = cursor1.execute(f"SELECT name FROM teachers WHERE id = '{id1}'").fetchone()[0]
    data = [id1, name, form, 'None', 'None']
    conn2 = sqlite3.connect('assign.db')
    cursor2 = conn2.cursor()
    cursor2.execute(f"INSERT OR IGNORE INTO homework VALUES(?, ?, ?, ?, ?)", data)
    conn2.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    await Assign.Todo.set()

@dp.message_handler(IsTeacher(), lambda message:message.text, state=Assign.Todo)
async def ast(message:types.Message):
    id1 = message.from_user.id
    todo = str(message.text)
    conn = sqlite3.connect('assign.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE homework SET todo = REPLACE(todo, 'None', '{todo}')")
    conn.commit()
    await message.answer("–ö–æ–≥–¥–∞ —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è (—É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm)")
    await Assign.Deadline.set()

@dp.message_handler(IsTeacher(), lambda message: message.text, state=Assign.Deadline)
async def asd(message:types.Message):
    id1 = message.from_user.id
    deadline = str(message.text)
    conn = sqlite3.connect('assign.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE homework SET deadline = REPLACE(deadline, 'None', '{deadline}')")
    conn.commit()
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await Assign.next()

@dp.message_handler(IsNotTeacher(), text=['/assignment', '–ó–∞–¥–∞–Ω–∏—è'])
async def assign_stud(message:types.Message):
    id1 = message.from_user.id
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    form = cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()
    conn2 = sqlite3.connect('assign.db')
    cursor2 = conn2.cursor()
    if form:
        to_print = cursor2.execute(f"SELECT todo FROM homework WHERE form = '{form[0]}'").fetchall()
        deadline = cursor2.execute(f"SELECT deadline FROM homework WHERE form = '{form[0]}'").fetchall()
        ans = ''
        for i in range(len(to_print)):
            ans += f"{i + 1}. {to_print[i][0]} –¥–æ {deadline[i][0]}\n"
        await message.answer(ans)
    else:
        form1 = cursor1.execute(f"SELECT form FROM parents WHERE id = '{id1}'").fetchone()
        if form1:
            to_print = cursor2.execute(f"SELECT todo FROM homework WHERE form = '{form1[0]}'").fetchall()
            deadline = cursor2.execute(f"SELECT deadline FROM homework WHERE form = '{form1[0]}'").fetchall()
            ans = ''
            for i in range(len(to_print)):
                ans += f"{i + 1}. {to_print[i][0]} –¥–æ {deadline[i][0]}\n"
            await message.answer(ans)
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π')

@dp.message_handler(IsTeacher(), commands='addevents')
async def tevent(message:types.Message):
    conn = sqlite3.connect('events.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS teachers(id, event, name, form, date)")
    cursor.execute("CREATE TABLE IF NOT EXISTS students(id, event, name, form, date)")
    conn.commit()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await Event.Name.set()

@dp.message_handler(IsTeacher(), lambda message:message.text, state=Event.Name)
async def evnam(message:types.Message):
    id1 = message.from_user.id
    event = message.text
    conn1 = sqlite3.connect('users.db')
    cursor1 = conn1.cursor()
    name = cursor1.execute(f"SELECT name FROM teachers WHERE id = '{id1}'").fetchone()[0]
    data = [id1, event, name, 'None', 'None']
    conn2 = sqlite3.connect('events.db')
    cursor2 = conn2.cursor()
    cursor2.execute("INSERT OR IGNORE INTO teachers VALUES(?, ?, ?, ?, ?)", data)
    conn2.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å —É—á–∞—Å—Ç–∏—è, –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö - –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ'")
    await Event.next()

@dp.message_handler(IsTeacher(), lambda message:message.text, state=Event.Form)
async def evform(message:types.Message):
    id1 = message.from_user.id
    form1 = message.text.upper()
    conn = sqlite3.connect('events.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE teachers SET form = REPLACE(form, 'None', {form1}) WHERE id = '{id1}'")
    conn.commit()
    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm)")
    await Event.next()

@dp.message_handler(IsTeacher(), lambda message:message.text, state=Event.Date)
async def evdate(message:types.Message):
    id1 = message.from_user.id
    date1 = message.text
    conn = sqlite3.connect("events.db")
    cursor = conn.cursor()
    cursor.execute(f"UPDATE teachers SET date = REPLACE(date, 'None', {date1}) WHERE id = '{id1}'")
    conn.commit()
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await Event.next()

@dp.message_handler(text=['/events', '–°–æ–±—ã—Ç–∏—è ‚ú®'])
async def sevent(message:types.Message):
    id1 = str(message.from_user.id)
    conn1 = sqlite3.connect("users.db")
    cursor1 = conn1.cursor()
    conn2 = sqlite3.connect('events.db')
    cursor2 = conn2.cursor()
    form = cursor1.execute(f"SELECT form FROM students WHERE id = '{id1}'").fetchone()
    print(form[0])
    if not form:
        form1 = cursor1.execute(f"SELECT form FROM teachers WHERE id = '{id1}'").fetchone()
        event = cursor2.execute(f"SELECT * FROM teachers").fetchall()
        if not event:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        else:
            ans = ''
            for i in event:
                if str(i[3]) in str(form1[0]):
                    ans += i[1] + " - " + i[4] + '\n\n'
            await message.answer(ans)
        if not form1:
            form2 = cursor1.execute(f"SELECT form FROM parents WHERE id = '{id1}'").fetchone()
            event = cursor2.execute(f"SELECT * FROM teachers").fetchall()
            if not event:
                await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
            else:
                ans = ''
                for i in event:
                    if str(i[3]) in str(form2[0]):
                        ans += i[1] + " - " + i[4] + '\n\n'
                await message.answer(ans)
    else:
        event = cursor2.execute(f"SELECT * FROM teachers").fetchall()
        if not event:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        else:
            ans = ''
            for i in event:
                if str(i[3]) in str(form[0]):
                     ans += i[1] + " - " + i[4] + '\n\n'
            await message.answer(ans)


@dp.message_handler(IsTeacher(), text=['/events', '–°–æ–±—ã—Ç–∏—è'])
async def sevent(message:types.Message):
    id1 = str(message.from_user.id)
    conn1 = sqlite3.connect("users.db")
    cursor1 = conn1.cursor()
    conn2 = sqlite3.connect('events.db')
    cursor2 = conn2.cursor()
    # form = cursor1.execute(f"SELECT form FROM students WHERE id = {id1}").fetchone()[0]
    event = cursor2.execute(f"SELECT * FROM teachers WHERE id = {id1}").fetchall()
    ans = ''
    for i in event:
        ans += f"{i[1]} - {i[-1]}\n\n"
    await message.answer(ans)


@dp.message_handler(IsNotTeacher(), commands='send')
async def send(message:types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–±–ª–µ–º—É –∏ —Ç.–¥.")
    await Send.Text.set()

@dp.message_handler(IsTeacher(), commands='send')
async def send(message:types.Message):
    await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π")

@dp.message_handler(IsNotTeacher(), lambda message:message.text, state=Send.Text)
async def stext(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    form = cursor.execute(f"SELECT form FROM students WHERE id = {id1}").fetchone()[0]
    name = cursor.execute(f"SELECT name FROM students WHERE id = {id1}").fetchone()[0]
    idt = cursor.execute(f"SELECT id FROM teachers WHERE form = '{form}'").fetchone()[0]
    to_send = message.text
    await bot.send_message(chat_id=idt, text=f"–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {name}")
    await bot.send_message(chat_id=idt, text=f"<b>{to_send}</b>")
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await Send.next()


@dp.message_handler(text=['/bells', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤'])
async def bell(message:types.Message):
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n\n1. 08:20 > 09:00\n2. 09:10 > 09:50\n3. 10:00 > 10:40\n4. 10:50 > 11:30\n5. 11:40 > 12:20\n"
"6. 12:50 > 13:30\n7. 13:40 > 14:20\n8. 14:40 > 15:20\n9. 15:30 > 16:10\n10. 17:00 > 17:30")


@dp.message_handler(commands='newlist', state=None)
async def new_list(message:types.Message, state: FSMContext):
    id1 = message.from_user.id
    conn = sqlite3.connect('to_do_list.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS list(id INTEGER, goal)")
    conn.commit()
    user = cursor.execute(f"SELECT * FROM list WHERE id = {id1}").fetchall()
    if user:
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫,—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /clearlist")
        await state.finish()
    else:
        cursor.execute(f"CREATE TABLE IF NOT EXISTS list(id INTEGER, goal)")
        conn.commit()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞")
        await NewList.next()


@dp.message_handler(lambda message: message.text, state=NewList.ListName)
async def name_list(message:types.Message):
    id1 = message.from_user.id
    list_name = message.text.title()
    conn = sqlite3.connect('to_do_list.db')
    cursor = conn.cursor()
    cursor.execute(f"CREATE TABLE IF NOT EXISTS list(id INTEGER, goal)")
    cursor.execute("INSERT OR IGNORE INTO list VALUES (?, ?)", (id1, list_name),)
    conn.commit()
    user = cursor.execute(f"SELECT * FROM list WHERE id = {id1}").fetchall()
    if user:
        await message.answer("–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newgoal")
        await NewList.next()
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await NewList.last()

@dp.message_handler(commands='newgoal', state=None)
async def add_goal(message:types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ü–µ–ª–∏")
    await NewGoal.next()

@dp.message_handler(lambda message: message.text, state=NewGoal.GoalName)
async def goal_name(message:types.Message):
    id1 = message.from_user.id
    goal = message.text
    data = [id1, goal]
    conn = sqlite3.connect('to_do_list.db')
    cursor = conn.cursor()
    cursor.execute(f"CREATE TABLE IF NOT EXISTS list(id INTEGER, goal)")
    cursor.execute(f"INSERT OR IGNORE INTO list VALUES(?, ?)", data)
    conn.commit()
    await message.answer("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await NewGoal.next()

@dp.message_handler(commands='mylist')
async def show_list(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('to_do_list.db')
    cursor = conn.cursor()
    users_list = cursor.execute(f"SELECT * FROM list WHERE id = {id1}").fetchall()[1::]
    if users_list:
        list_to_send = ''
        list_to_send += cursor.execute(f"SELECT * FROM list WHERE id = {id1}").fetchone()[-1] + "\n"
        for i, x in enumerate(users_list):
            for j in x[1::]:
                list_to_send += f"{i+1}. {j.title()}\n"
        await message.answer(list_to_send)
    else:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

@dp.message_handler(commands='clearlist')
async def delete(message:types.Message):
    id1 = message.from_user.id
    conn = sqlite3.connect('to_do_list4.db')
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM list WHERE id = {id1}")
    conn.commit()
    await message.answer("–í–∞–º —Å–ø–∏—Å–æ–∫ –±—ã–ª —É–¥–∞–ª—ë–Ω, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newlist")


@dp.message_handler(text=['/menu', '–ù–∞–∑–∞–¥', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def menu(message:types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_btns)



async def remind():
    while True:
        td = str(date.today()).split('-')
        conn1 = sqlite3.connect('users.db')
        cursor1 = conn1.cursor()
        users = cursor1.execute("SELECT id FROM students").fetchall()
        for i in users:
            conn2 = sqlite3.connect('assign.db')
            cursor2 = conn2.cursor()
            user = int(i[0])
            form1 = str(cursor1.execute(f"SELECT form FROM students WHERE id = {user}").fetchone()[0])
            deadline = cursor2.execute(f"SELECT deadline FROM homework WHERE form = '{form1}'").fetchall()
            for x in deadline:
                dl = str(x[0])
                task = cursor2.execute(f"SELECT todo FROM homework WHERE form = '{form1}' AND deadline = {dl}").fetchone()[0]
                if dl[dl.find('.')+1:] == td[1] and int(td[-1]) == (int(dl[:dl.find('.')])-1):
                    await bot.send_message(chat_id=user, text=f"–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è: {task}")

        await sleep(86400)

@dp.message_handler(text=['–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è', '/info'])
async def info(message:types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=inf)

@dp.message_handler(text=['/high_edu', '–ü–æ–¥–±–æ—Ä–∫–∞ –≤—É–∑–æ–≤'])
async def send_welcome(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=high_choice)

@dp.message_handler(text=['/olymp', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º'])
async def olymp(message:types.Message):
    await message.answer("–ò–ª—å–¥–∞—Ä –°–∞–π—Ñ—É–ª–∞–µ–≤–∏—á(—Ñ–∏–∑–∏–∫–∞) - 8-960-XXXXXXX\n\n–ê—Ä—Ç—É—Ä –ü–∞–≤–ª–æ–≤–∏—á(–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞) - 8-963-XXXXXXX\n\n""–õ–∞—Ä–∏—Å–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞(–∏—Å—Ç–æ—Ä–∏—è) - 8-965-XXXXXXX\n\n–ò–ª—å–¥—É—Å –ò–ª—å—è—Å–æ–≤–∏—á (–∞–Ω–≥–ª.—è–∑) - 8-939-XXXXXXX\n\n"
"–ò—Å–∫–∞–Ω–¥–µ—Ä –°—É–Ω–≥–∞—Ç–æ–≤ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞)  - 8-937-XXXXXXX\n\n–ê–π—Ä–∞—Ç –ê–ª—å—Ñ–∏—Å–æ–≤–∏—á (–æ–±—â-–∏–µ) - 8-953-XXXXXXX\n\n""(–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –∫–ª–∞—Å—Å–Ω–æ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é)")


@dp.message_handler(text=['/courses', '–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã'])
async def courses(message: types.Message):
    await message.answer("–ö—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ–¥—É—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π", reply_markup=inline_kb1)

@dp.message_handler(text=['/links', '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'])
async def links(message:types.Message):
    await message.answer("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", reply_markup=links_kb)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(remind())
    executor.start_polling(dp, skip_updates=True)
